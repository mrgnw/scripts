#!/usr/bin/env python3

import argparse
from pathlib import Path
import sqlglot
from sqlglot.optimizer import optimize
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler


class SqlFileChangeHandler(FileSystemEventHandler):
	def __init__(self, src_path, tgt_path, src, tgt):
		self.src_path = Path(src_path).resolve()
		self.tgt_path = Path(tgt_path).resolve()
		self.src = src
		self.tgt = tgt

	def on_modified(self, event):
		if Path(event.src_path).resolve() == self.src_path:
			self.transpile_and_format_sql()

	def transpile_and_format_sql(self):
		with open(self.src_path, 'r') as file:
			sql = file.read()

		optimized = optimize(sqlglot.parse_one(sql)).sql(pretty=True)
		transpiled = '\n'.join(sqlglot.transpile(optimized, read=self.src, write=self.tgt, pretty=True))

		with open(self.tgt_path, 'w') as file:
			file.write(transpiled)

		print(f'\t{self.src_path.name} â–¸ {self.tgt_path.name}')


def main():
	parser = argparse.ArgumentParser(description='Monitor and transpile SQL files.')
	parser.add_argument('--tgt', default='mysql', help='Target SQL dialect')
	parser.add_argument('--src_sql', type=str, default='src.sql', help='Source SQL file path')
	parser.add_argument('--src', default='duckdb', help='Source SQL dialect')

	args = parser.parse_args()

	event_handler = SqlFileChangeHandler(args.src_sql, f'{args.tgt}.sql', args.src, args.tgt)
	observer = Observer()
	observer.schedule(event_handler, path=Path(args.src_sql).parent, recursive=True)
	observer.start()

	print(f'Monitoring {args.src_sql} for changes...')
	try:
		while True:
			pass
	except KeyboardInterrupt:
		observer.stop()
	observer.join()


if __name__ == '__main__':
	main()
